{"version":3,"sources":["BridgedIframe.js","App.js","serviceWorker.js","index.js"],"names":["libInstances","instances","add","libInstance","push","executeOnType","apiName","fn","forEach","instance","api","findApiOfType","apiMap","Common","setSend","send","displayBlur","blur","displayGrayscale","grayScale","Api1","photoSelected","id","Api2","photoClicked","displayNewPhoto","Api3","setGrayscale","grayscale","setBlur","BridgedIframe","src","type","apis","rest","console","log","setIframe","iframe","url","URL","webApiBridge","WebApiBridge","origin","targetOrigin","bind","this","find","target","contentWindow","window","addEventListener","event","source","onMessage","data","map","apiClassName","onload","title","ref","scrolling","LibType1App","process","LibType2Apps","App","className","index","key","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aeaf3314.chunk.js","sourcesContent":["\nimport React from 'react';\nimport WebApiBridge from '@precor/web-api-bridge';\n\n// createLibInstance factory, libs use apis to communicate through a bridge\nconst createLibInstance = ({ webApiBridge, apis }) => ({\n  webApiBridge,\n  apis,\n  findApiOfType(apiName) {\n    return this.webApiBridge.apis.find(api => (api instanceof apiMap[apiName]));\n  },\n});\n\n// to keep track of created libs that use apis to communicate\nclass libInstances {\n  static instances = [];\n\n  static add = libInstance => libInstances.instances.push(libInstance);\n\n  static executeOnType = (apiName, fn) => {\n    libInstances.instances.forEach((instance) => {\n      const api = instance.findApiOfType(apiName);\n      if (api) fn(api);\n    });\n  }\n}\n\nclass Common {\n  setSend = (send) => {\n    this.send = send;\n  };\n\n  displayBlur = (blur) => {\n    this.send('displayBlur', [blur], false);\n  };\n\n  displayGrayscale = (grayScale) => {\n    this.send('displayGrayscale', [grayScale], false);\n  };\n}\n\nclass Api1 {\n  setSend = (send) => {\n    this.send = send;\n  };\n\n  photoSelected = (id) => {\n    this.send('photoSelected', [id], false);\n  };\n}\n\nclass Api2 {\n  setSend = (send) => {\n    this.send = send;\n  };\n\n  photoClicked = (id) => {\n    libInstances.executeOnType('Api1', api => api.photoSelected(id));\n    libInstances.executeOnType('Api2', (api) => { if (api !== this) api.displayNewPhoto(); });\n  };\n\n  displayNewPhoto = () => {\n    this.send('displayNewPhoto', null, false);\n  };\n}\n\nclass Api3 {\n  setSend = (send) => {\n    this.send = send;\n  };\n\n  setGrayscale = (grayscale) => {\n    libInstances.executeOnType('Common', api => api.displayGrayscale(grayscale));\n  };\n\n  setBlur = (blur) => {\n    libInstances.executeOnType('Common', api => api.displayBlur(blur));\n  };\n}\n\nconst apiMap = {\n  Common, Api1, Api2, Api3,\n};\n\nconst BridgedIframe = ({\n  src, type, apis, ...rest\n}) => {\n  console.log(`render iframe: ${src}`);\n\n  const setIframe = (iframe) => {\n    const url = new URL(src);\n    const webApiBridge = new WebApiBridge();\n    webApiBridge.origin = url.origin;\n    webApiBridge.targetOrigin = url.origin;\n    const send = webApiBridge.send.bind(webApiBridge);\n    libInstances.add(createLibInstance({ webApiBridge, apis }));\n    webApiBridge.target = iframe.contentWindow;\n    window.addEventListener('message', (event) => {\n      if (event && event.source === webApiBridge.target) {\n        webApiBridge.onMessage(event, event.data);\n      }\n    });\n    webApiBridge.apis = apis.map((apiClassName) => {\n      const api = new apiMap[apiClassName]();\n      api.setSend(send);\n      return api;\n    });\n    iframe.onload = () => {\n      console.log(`${iframe.src} loaded`);\n      send('ready', [{ type, apis }], false);\n    };\n  };\n\n  return (\n    <iframe\n      src={src}\n      title={src}\n      ref={(iframe) => { setIframe(iframe); }}\n      scrolling=\"no\"\n      {...rest}\n    />\n  );\n};\n\nexport default BridgedIframe;\n","import React from 'react';\nimport BridgedIframe from './BridgedIframe';\nimport './App.css';\n\nconst LibType1App = { src: process.env.REACT_APP_WEBAPP1, type: 'LibType1', apis: ['Common', 'Api1'] };\n\nconst LibType2Apps = [\n  // two instances of webapp1, the first one can set blur and grayscale\n  { src: process.env.REACT_APP_WEBAPP1, type: 'LibType2', apis: ['Common', 'Api2', 'Api3'] },\n  { src: process.env.REACT_APP_WEBAPP1, type: 'LibType2', apis: ['Common', 'Api2'] },\n  // two instances of webapp2\n  { src: process.env.REACT_APP_WEBAPP2, type: 'LibType2', apis: ['Common', 'Api2'] },\n  { src: process.env.REACT_APP_WEBAPP2, type: 'LibType2', apis: ['Common', 'Api2'] },\n];\n\nconst App = () => {\n  console.log('render parent');\n  return (\n    <div>\n      <div>\n        <BridgedIframe\n          className=\"fullscreen-iframe\"\n          src={LibType1App.src}\n          type={LibType1App.type}\n          apis={LibType1App.apis}\n        />\n      </div>\n      <div className=\"container\">\n        <div className=\"row\">\n          {LibType2Apps.map(({ src, type, apis }, index) => (\n            <BridgedIframe\n              className=\"image-select\"\n              key={`LibType2_${index}`}\n              src={src}\n              type={type}\n              apis={apis}\n            />\n          ))}\n        </div>\n        <div className=\"overlay-text\">\n          Click on one of the 4 photos\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}