{"version":3,"sources":["../node_modules/webapp-library/apis sync /^/.//.*$","usePicsum.js","App.js","serviceWorker.js","index.js"],"names":["map","./Api1","./Api1.js","./Api2","./Api2.js","./Api3","./Api3.js","./Common","./Common.js","./Send","./Send.js","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","buildRequestUrl","data","_data$size","size","width","height","grayscale","blur","requestUrl","concat","getPhoto","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","lastRequestUrl","response","imageBlob","wrap","_context","prev","next","abrupt","fetch","sent","blob","url","split","objectSpread","URL","createObjectURL","stop","_x","apply","this","arguments","usePicsum","_useState","useState","window","innerWidth","innerHeight","_useState2","slicedToArray","setSize","useEffect","handleResize","addEventListener","removeEventListener","useWindowSize","_useState3","_useState4","setData","then","d","App","console","log","_usePicsum","_usePicsum2","photoInfo","setPhotoInfo","startApis","process","api2","setCallback","pi","undefined","common","displayGrayscale","displayBlur","react_default","createElement","src","alt","onClick","photoClicked","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0583523d.chunk.js","sourcesContent":["var map = {\n\t\"./Api1\": 24,\n\t\"./Api1.js\": 24,\n\t\"./Api2\": 25,\n\t\"./Api2.js\": 25,\n\t\"./Api3\": 26,\n\t\"./Api3.js\": 26,\n\t\"./Common\": 13,\n\t\"./Common.js\": 13,\n\t\"./Send\": 6,\n\t\"./Send.js\": 6\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 84;","\nimport { useState, useEffect } from 'react';\n\nconst buildRequestUrl = (data) => {\n  const {\n    size: { width, height }, id, grayscale, blur,\n  } = data;\n  let requestUrl = (id)\n    ? `https://picsum.photos/id/${id}/${width}/${height}/`\n    : `https://picsum.photos/${width}/${height}/`;\n  if (grayscale) requestUrl = `${requestUrl}?grayscale`;\n  if (blur) requestUrl = (grayscale) ? `${requestUrl}&blur` : `${requestUrl}?blur`;\n  return requestUrl;\n};\n\nconst getPhoto = async (data) => {\n  const { lastRequestUrl } = data;\n  const requestUrl = buildRequestUrl(data);\n  if (requestUrl === lastRequestUrl) return data; // no changes\n  const response = await fetch(requestUrl);\n  const imageBlob = await response.blob();\n  const id = response.url.split('/')[4];\n  return {\n    ...data,\n    lastRequestUrl: buildRequestUrl({ ...data, id }),\n    id,\n    url: URL.createObjectURL(imageBlob),\n  };\n};\n\nfunction useWindowSize() {\n  const [size, setSize] = useState({ width: window.innerWidth, height: window.innerHeight });\n\n  useEffect(() => {\n    const handleResize = () => setSize({ width: window.innerWidth, height: window.innerHeight });\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  });\n\n  return size;\n}\n\nconst usePicsum = () => {\n  const size = useWindowSize();\n  const [data, setData] = useState({});\n  const { id, grayscale, blur } = data;\n\n  useEffect(() => {\n    getPhoto({ ...data, size }).then(d => setData(d));\n  }, [size, id, grayscale, blur]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return [data, setData];\n};\n\nexport default usePicsum;\n","import React, { useEffect } from 'react';\nimport { startApis } from 'webapp-library';\nimport { common, api2 } from 'webapp-library/LibType2';\nimport { photoClicked } from 'webapp-library/LibType2/Api2';\nimport './App.css';\nimport usePicsum from './usePicsum';\n\nconst parentOrigin = process.env.REACT_APP_PARENT_ORIGIN;\n\nconst App = () => {\n  console.log('render webapp2');\n  const [photoInfo, setPhotoInfo] = usePicsum();\n  const { url, id } = photoInfo;\n\n  useEffect(() => {\n    startApis(parentOrigin);\n    api2.setCallback('displayNewPhoto', () => setPhotoInfo(pi => (\n      { ...pi, id: undefined }\n    )));\n    common.setCallback('displayGrayscale', displayGrayscale => setPhotoInfo(pi => (\n      { ...pi, grayscale: displayGrayscale }\n    )));\n    common.setCallback('displayBlur', displayBlur => setPhotoInfo(pi => (\n      { ...pi, blur: displayBlur }\n    )));\n  }, [setPhotoInfo]);\n\n  if (!url) return null;\n  return <img src={url} alt=\"\" onClick={() => photoClicked(id)} />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}